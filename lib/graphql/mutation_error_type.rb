# typed: strict

module ResourceRegistry
  module Graphql
    class SimpleErrorType < GraphQL::Schema::Object
      extend T::Sig

      field :type, String, null: false
      field :message, String, null: false
    end

    class StructuredErrorType < GraphQL::Schema::Object
      extend T::Sig

      field :field, String, null: false
      field :messages, [String], null: false
    end

    class MutationErrorType < GraphQL::Schema::Union
      extend T::Sig

      description 'Represents all types of error messages generated by a mutation'
      possible_types SimpleErrorType, StructuredErrorType

      sig { params(object: T.untyped, _context: T.untyped).returns(T::Class[T.anything]) }
      def self.resolve_type(object, _context)
        return StructuredErrorType if object.is_a?(StructuredError)
        return SimpleErrorType if object.is_a?(SimpleError)

        raise "Object #{object} cannot be resolved."
      end
    end
  end
end
